{"version":3,"sources":["styledComponents/githubSearch.js","components/GithubSearchView.js","actions/searchActions.js","containers/GithubSearch.js","App.js","serviceWorker.js","reducers/searchReducer.js","reducers/rootReducer.js","index.js","store.js"],"names":["GithubLogo","styled","img","_templateObject","StarIcon","_templateObject2","TopTitle","h1","_templateObject3","NoResultsH3","h3","_templateObject4","StyledListItem","ListItem","_templateObject5","MainGrid","Grid","_templateObject6","SearchButton","Button","_templateObject7","GithubSearchView","props","react_default","a","createElement","alignItems","container","direction","justify","href","rel","target","alt","src","Grid_default","item","xs","sm","autoComplete","noValidate","onSubmit","handleSearch","TextField_default","id","label","value","searchReducer","githubName","onChange","handleInputChange","margin","onClick","variant","List_default","renderRepoItems","updateGithubName","type","payload","updateReposArray","reposArray","updateInvalidSearch","invalidSearch","retrieveGithubRepos","dispatch","axios","url","concat","method","then","response","data","length","catch","err","console","error","GithubSearch","state","e","_this","preventDefault","handleRepoClick","repo","window","open","clone_url","_this$props$searchRed","map","button","key","title","ListItemText_default","primary","name","fork","secondary","description","stargazers_count","components_GithubSearchView","this","Component","connect","App","containers_GithubSearch","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","initialState","combineReducers","arguments","undefined","action","Object","objectSpread","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunk","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6fab29e4.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\n\nexport const GithubLogo = styled.img`\n  width: 50px;\n  text-align: center;\n`;\nexport const StarIcon = styled.img`\n  width: 24px;\n  margin-left: 3px;\n  opacity: 0.6;\n`;\n\n// headers\nexport const TopTitle = styled.h1`\n  text-align: center;\n`;\nexport const NoResultsH3 = styled.h3`\n  color: red;\n  font-weight: 400;\n  text-align: center;\n`;\n\n// Material-UI Components\nexport const StyledListItem = styled(ListItem)`\n  border: 1px solid lightgray !important;\n  margin-bottom: -1px !important;\n\n  @media (min-width: 800px) {\n    width: 800px !important\n  }\n\n`;\nexport const MainGrid = styled(Grid)`\n  padding-top: 50px !important;\n`;\nexport const SearchButton = styled(Button)`\n  top: 10px !important\n`;\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport TextField from '@material-ui/core/TextField';\n\n// Styled Components\nimport {\n  GithubLogo,\n  TopTitle,\n  MainGrid,\n  SearchButton\n} from './../styledComponents/githubSearch';\n\nconst GithubSearchView = (props) => (\n  <MainGrid alignItems='center' container direction='column' justify='center'>\n    <a href='https://github.com/' rel='noopener noreferrer' target='_blank'>\n      <GithubLogo alt='github' src='https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png' />\n    </a>\n    <Grid item xs={9} sm={10}>\n      <TopTitle>GitHub Repository Search</TopTitle>\n    </Grid>\n    <Grid item>\n      <form autoComplete='off' noValidate onSubmit={props.handleSearch}>\n        <Grid alignItems='center' container direction='row'>\n          <Grid item xs={9}>\n            <TextField\n              id='github_name'\n              label='GitHub User Name'\n              value={props.searchReducer.githubName}\n              onChange={props.handleInputChange}\n              margin='normal'\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <SearchButton onClick={props.handleSearch} variant='outlined'>\n              Search\n            </SearchButton>\n          </Grid>\n        </Grid>\n      </form>\n    </Grid>\n    <br />\n    <Grid item xs={11} sm={12}>\n      <List>\n        {props.renderRepoItems()}\n      </List>\n    </Grid>\n  </MainGrid>\n);\n\nexport default GithubSearchView;\n","import axios from 'axios';\n\n// Exported actions\nexport const updateGithubName = (githubName) => {\n  return {\n    type: 'UPDATE_GITHUB_NAME',\n    payload: githubName,\n  };\n}\nexport const updateReposArray = (reposArray) => {\n  return {\n    type: 'UPDATE_REPOS_ARRAY',\n    payload: reposArray,\n  };\n}\nexport const updateInvalidSearch = (invalidSearch) => {\n  return {\n    type: 'UPDATE_INVALID_SEARCH',\n    payload: invalidSearch,\n  };\n}\n\n// Checks promo code and updates discount value if applicable\nexport const retrieveGithubRepos = (githubName) => {\n  return dispatch => {\n    axios({\n      url: `https://api.github.com/users/${githubName}/repos`,\n      method: 'get',\n    })\n      .then(response => {\n        if (response.data.length === 0) {\n          dispatch(updateInvalidSearch(true));\n        } else {\n          dispatch(updateReposArray(response.data));\n        }\n      })\n      .catch(err => {\n        console.error('GITHUB REQUEST ERROR:', err);\n        dispatch(updateInvalidSearch(true));\n      })\n  };\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Grid from '@material-ui/core/Grid';\nimport ListItemText from '@material-ui/core/ListItemText';\n\n// UI Components\nimport GithubSearchView from './../components/GithubSearchView';\n\n\n// Actions\nimport {\n  updateGithubName,\n  updateReposArray,\n  retrieveGithubRepos,\n  updateInvalidSearch\n} from './../actions/searchActions';\n\n// Styled Components\nimport {\n  NoResultsH3,\n  StyledListItem,\n  StarIcon,\n} from './../styledComponents/githubSearch';\n\nclass GithubSearch extends Component {\n  state = {}\n\n  // Updates github name input\n  handleInputChange = (e) => {\n    // Removes search error if true\n    if (this.props.searchReducer.invalidSearch) {\n      this.props.dispatch(updateInvalidSearch(false));\n    }\n    // Updates search value\n    this.props.dispatch(updateGithubName(e.target.value));\n  }\n\n  // Submits request to github based on input name\n  handleSearch = (e) => {\n    e.preventDefault();\n    if (this.props.searchReducer.reposArray.length) {\n      this.props.dispatch(updateReposArray([]));\n    }\n    // Makes get request to GitHub API and retrieves repo data if successful\n    this.props.dispatch(retrieveGithubRepos(this.props.searchReducer.githubName));\n  }\n\n  // Opens repo url in new tab\n  handleRepoClick = (repo) => {\n    window.open(repo.clone_url, '_blank');\n  }\n\n  // Maps through and renders repos when get request is successful\n  renderRepoItems = () => {\n    const { reposArray, invalidSearch } = this.props.searchReducer;\n    if (invalidSearch) {\n      return (\n        <div>\n          <NoResultsH3>\n            No results. Please try another GitHub username.\n          </NoResultsH3>\n        </div>\n      )\n    }\n    if (reposArray.length === 0) {\n      return null;\n    }\n    const repos = reposArray.map(repo => {\n      return (\n        <StyledListItem button key={repo.id} onClick={() => { this.handleRepoClick(repo)} } title={repo.clone_url}>\n          <ListItemText primary={`${repo.name} ${repo.fork ? '(fork)' : ''}`} secondary={repo.description} />\n          <Grid alignItems='center' container direction='row' justify='flex-end'>\n            <Grid item>\n              {repo.stargazers_count}\n            </Grid>\n            <Grid item>\n              <StarIcon alt='star' src='https://www.materialui.co/materialIcons/toggle/star_black_216x216.png' />\n            </Grid>\n          </Grid>\n        </StyledListItem>\n      )\n    });\n\n    return repos;\n  }\n\n  render() {\n    return (\n      <GithubSearchView\n        handleInputChange={this.handleInputChange}\n        handleSearch={this.handleSearch}\n        renderRepoItems={this.renderRepoItems}\n        searchReducer={this.props.searchReducer}\n      />\n    );\n  }\n}\n\nGithubSearch.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  searchReducer: PropTypes.shape({\n    githubName: PropTypes.string,\n    reposArray: PropTypes.arrayOf(PropTypes.shape({})),\n  }).isRequired,\n};\n\nconst mapStateToProps = state => ({\n  searchReducer: state.searchReducer,\n});\n\nexport default connect(mapStateToProps)(GithubSearch);\n","import React, { Component } from 'react';\n\nimport GithubSearch from './containers/GithubSearch';\n\n// Primary parent component\nclass App extends Component {\n  state = {}\n\n  render() {\n    return (\n      <GithubSearch {...this.props} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  githubName: '',\n  reposArray: [],\n  invalidSearch: false,\n};\n\nexport default (state = initialState, action) => {\n switch (action.type) {\n  case 'UPDATE_GITHUB_NAME':\n    return { ...state, githubName: action.payload };\n  case 'UPDATE_REPOS_ARRAY':\n    return { ...state, reposArray: action.payload };\n  case 'UPDATE_INVALID_SEARCH':\n    return { ...state, invalidSearch: action.payload };\n  default:\n    return state;\n }\n};\n","import { combineReducers } from 'redux';\nimport searchReducer from './searchReducer';\n\nexport default combineReducers({\n searchReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore() {\n return createStore(\n  rootReducer,\n   applyMiddleware(thunk)\n );\n}\n"],"sourceRoot":""}